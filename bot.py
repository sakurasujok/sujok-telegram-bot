from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

BOT_TOKEN = "8031570942:AAGAK2QzgSfJ132zBNFO8OsD__Z-kC9Qmyg"
ADMIN_ID = 8031570942  # —Ç–≤–æ–π Telegram ID

# –≠—Ç–∞–ø—ã —Ñ–æ—Ä–º—ã
NAME, CONTACT, MESSAGE = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Su Jok Assistant ü§≤üåø\n\n"
                                    "–ö–æ–º–∞–Ω–¥—ã:\n"
                                    "/feedback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                                    "/pay ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ")

async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://forms.gle/BMAPZ8WQYiQxP3fL6")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=reply_markup)

async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    return NAME

async def feedback_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? (email, @username –∏–ª–∏ –Ω–æ–º–µ—Ä)")
    return CONTACT

async def feedback_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    return MESSAGE

async def feedback_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["message"] = update.message.text

    name = context.user_data["name"]
    contact = context.user_data["contact"]
    message = context.user_data["message"]

    feedback = f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n\n" \
               f"üë§ –ò–º—è: {name}\nüì± –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}"

    await context.bot.send_message(chat_id=ADMIN_ID, text=feedback)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("pay", pay))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("feedback", feedback_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_name)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_contact)],
            MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback_message)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()